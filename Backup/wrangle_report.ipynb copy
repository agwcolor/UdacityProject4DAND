{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Wrangling Report - @WeRateDogs on Twitter\n",
    "This report is an analysis of the Cleaned master data sets \n",
    "- ./Data/dfa_clean.csv\n",
    "- ./Data/dfi_clean.csv) \n",
    "\n",
    "and some insights gathered."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Background\n",
    "\n",
    "This project is an exercise in Data Wrangling - gathering, assessing and cleaning data from the twitter account : @WeRateDogs.  \n",
    "\n",
    "Datasets provided were:\n",
    "- An enhanced twitter archive with basic tweet data, \n",
    "- Additional tweet data which I downloaded from the Twitter API, \n",
    "- Image prediction data on what kinds of dogs were in the photos, as well as dog categories (dogger,fluffo,pupper,puppo) and names extracted from tweet text using an ML model\n",
    "\n",
    "You can see a visualization of many of the images used and gathered from Twitter below."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "### Data Wrangling Process\n",
    "#### Gathering \n",
    "I gathered the data from 3 datasources :\n",
    "- manually downloaded the enhanced twitter archive from Udacity (twitter-archive-enhanced.csv)\n",
    "- programatically downloaded image predicton data .tsv file from Udacity(tweet_json.txt)\n",
    "- programatically downloaded Twitter data using the Twitter API using my credentials (image-predictions.tsv)\n",
    "- programatically downloaded Thumbnail images from Twitter in order to visualize machine learning model results.\n",
    "\n",
    "#### Assessing \n",
    "I explored the datasets visually as well as programmatically. During this process, I became most interested in : dog names, what the ML model predicted for dog breeds (and how funny it was to see what it predicted when it was wrong!), interesting dog categories like (dogger, fluffo, pupper, puppo) and how prevalent they were, what languages were indicated  in tweet data, how dogs are rated, what tweet_counts, and retweet_counts, for each tweet id was, and so on.\n",
    "\n",
    "#### Cleaning\n",
    "Some of the ways that I cleaned the data:\n",
    "- Removed dog names that were very unlikely like : \"a, the, and, etc\" \n",
    "- Converted columns like dogger,fluffo,pupper,puppo I converted to 1 & 0 values so that I could count them.\n",
    "- Renamed columns for consistency across tables so that I could merge them, ie. created_at -> timestamp, id -> tweet_id\n",
    "- Renamed columns so that they are easier to interpret - (ie p1 as pred_1, lang as language, etc) \n",
    "- Capitalized breed names and removed underscores.\n",
    "- Removed columns that I wasn't interested in reporting on, or that didn't have much data for ie. `in_reply_to_status_id, in_reply_to_userid, retweeted_status_id, retweeted_status_user_id, retweeted_status_timestamp, expanded_urls`\n",
    "- Merged the df_archive & df_twitter_api datasets on tweet_id and timestamp"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Analyzing\n",
    "- [Insight 1](#insight1) : Used new column 'rating_ratio' created during cleaning, to see which dog breeds had the highest numerator / demoninator value.\n",
    "- [Insight 2](#insight2) : Used extracted Year category from datetime to find an upward trend over time of favorite and retrweet counts\n",
    "- [Insight 3](#insight3) : By changing dog categories to 0 / 1 values I can sum up and see which ones are most popular.\n",
    "- [Insight 4](#insight4) : After cleaning the the names by removing words like 'a, the, etc' and also capitalizing them, I'm able to see which names are the most popular. I'm also able to do this for the dog breeds.\n",
    "- [Insight 5](#insight5) : Discovered that the dog images correctly identified as dogs were not always correct much of the time. For example, a German Shepherd was identified as a corgi (aka Carigan) . I used the image_munge() script to find and glue all of these images together so I could see what was going on clearly. Farther down, we also look at what the top incorrectly identified images pulled up."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "sns.set(style=\"ticks\", color_codes=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfa = pd.read_csv(\"./Data/dfa_clean.csv\") #tweet data\n",
    "dfi = pd.read_csv(\"./Data/dfi_clean.csv\") #image predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.options.display.max_columns = 2000\n",
    "pd.options.display.max_rows = 2500"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>text</th>\n",
       "      <th>expanded_urls</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>doggo</th>\n",
       "      <th>floofer</th>\n",
       "      <th>pupper</th>\n",
       "      <th>puppo</th>\n",
       "      <th>rating_ratio</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>favorite_count</th>\n",
       "      <th>language</th>\n",
       "      <th>entities</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>2017-08-01 16:23:56+00:00</td>\n",
       "      <td>This is Phineas. He's a mystical boy. Only eve...</td>\n",
       "      <td>https://twitter.com/dog_rates/status/892420643...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Phineas</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.3</td>\n",
       "      <td>7675</td>\n",
       "      <td>36057</td>\n",
       "      <td>English</td>\n",
       "      <td>{'hashtags': [], 'symbols': [], 'user_mentions...</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>892177421306343426</td>\n",
       "      <td>2017-08-01 00:17:27+00:00</td>\n",
       "      <td>This is Tilly. She's just checking pup on you....</td>\n",
       "      <td>https://twitter.com/dog_rates/status/892177421...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Tilly</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.3</td>\n",
       "      <td>5676</td>\n",
       "      <td>31092</td>\n",
       "      <td>English</td>\n",
       "      <td>{'hashtags': [], 'symbols': [], 'user_mentions...</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id                  timestamp  \\\n",
       "0  892420643555336193  2017-08-01 16:23:56+00:00   \n",
       "1  892177421306343426  2017-08-01 00:17:27+00:00   \n",
       "\n",
       "                                                text  \\\n",
       "0  This is Phineas. He's a mystical boy. Only eve...   \n",
       "1  This is Tilly. She's just checking pup on you....   \n",
       "\n",
       "                                       expanded_urls  rating_numerator  \\\n",
       "0  https://twitter.com/dog_rates/status/892420643...                13   \n",
       "1  https://twitter.com/dog_rates/status/892177421...                13   \n",
       "\n",
       "   rating_denominator     name  doggo  floofer  pupper  puppo  rating_ratio  \\\n",
       "0                  10  Phineas      0        0       0      0           1.3   \n",
       "1                  10    Tilly      0        0       0      0           1.3   \n",
       "\n",
       "   retweet_count  favorite_count language  \\\n",
       "0           7675           36057  English   \n",
       "1           5676           31092  English   \n",
       "\n",
       "                                            entities  year  \n",
       "0  {'hashtags': [], 'symbols': [], 'user_mentions...  2017  \n",
       "1  {'hashtags': [], 'symbols': [], 'user_mentions...  2017  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfa.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2331 entries, 0 to 2330\n",
      "Data columns (total 17 columns):\n",
      " #   Column              Non-Null Count  Dtype  \n",
      "---  ------              --------------  -----  \n",
      " 0   tweet_id            2331 non-null   int64  \n",
      " 1   timestamp           2331 non-null   object \n",
      " 2   text                2331 non-null   object \n",
      " 3   expanded_urls       2272 non-null   object \n",
      " 4   rating_numerator    2331 non-null   int64  \n",
      " 5   rating_denominator  2331 non-null   int64  \n",
      " 6   name                1487 non-null   object \n",
      " 7   doggo               2331 non-null   int64  \n",
      " 8   floofer             2331 non-null   int64  \n",
      " 9   pupper              2331 non-null   int64  \n",
      " 10  puppo               2331 non-null   int64  \n",
      " 11  rating_ratio        2331 non-null   float64\n",
      " 12  retweet_count       2331 non-null   int64  \n",
      " 13  favorite_count      2331 non-null   int64  \n",
      " 14  language            2331 non-null   object \n",
      " 15  entities            2331 non-null   object \n",
      " 16  year                2331 non-null   int64  \n",
      "dtypes: float64(1), int64(10), object(6)\n",
      "memory usage: 309.7+ KB\n"
     ]
    }
   ],
   "source": [
    "dfa.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 344,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>jpg_url</th>\n",
       "      <th>img_num</th>\n",
       "      <th>prediction_1</th>\n",
       "      <th>pred_1_confidence</th>\n",
       "      <th>pred1_is_dog</th>\n",
       "      <th>prediction_2</th>\n",
       "      <th>pred_2_confidence</th>\n",
       "      <th>pred2_is_dog</th>\n",
       "      <th>prediction_3</th>\n",
       "      <th>pred_3_confidence</th>\n",
       "      <th>pred3_is_dog</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>666020888022790149</td>\n",
       "      <td>https://pbs.twimg.com/media/CT4udn0WwAA0aMy.jpg</td>\n",
       "      <td>1</td>\n",
       "      <td>Welsh Springer Spaniel</td>\n",
       "      <td>0.465074</td>\n",
       "      <td>True</td>\n",
       "      <td>Collie</td>\n",
       "      <td>0.156665</td>\n",
       "      <td>True</td>\n",
       "      <td>Shetland Sheepdog</td>\n",
       "      <td>0.061428</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>666029285002620928</td>\n",
       "      <td>https://pbs.twimg.com/media/CT42GRgUYAA5iDo.jpg</td>\n",
       "      <td>1</td>\n",
       "      <td>Redbone</td>\n",
       "      <td>0.506826</td>\n",
       "      <td>True</td>\n",
       "      <td>Miniature Pinscher</td>\n",
       "      <td>0.074192</td>\n",
       "      <td>True</td>\n",
       "      <td>Rhodesian Ridgeback</td>\n",
       "      <td>0.072010</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id                                          jpg_url  \\\n",
       "0  666020888022790149  https://pbs.twimg.com/media/CT4udn0WwAA0aMy.jpg   \n",
       "1  666029285002620928  https://pbs.twimg.com/media/CT42GRgUYAA5iDo.jpg   \n",
       "\n",
       "   img_num            prediction_1  pred_1_confidence  pred1_is_dog  \\\n",
       "0        1  Welsh Springer Spaniel           0.465074          True   \n",
       "1        1                 Redbone           0.506826          True   \n",
       "\n",
       "         prediction_2  pred_2_confidence  pred2_is_dog         prediction_3  \\\n",
       "0              Collie           0.156665          True    Shetland Sheepdog   \n",
       "1  Miniature Pinscher           0.074192          True  Rhodesian Ridgeback   \n",
       "\n",
       "   pred_3_confidence  pred3_is_dog  \n",
       "0           0.061428          True  \n",
       "1           0.072010          True  "
      ]
     },
     "execution_count": 344,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfi.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='insight1'></a>\n",
    "### Insight 1 : Used new column 'rating_ratio' to see which dog breeds had the highest numerator / demoninator value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>rating_ratio</th>\n",
       "      <th>prediction_1</th>\n",
       "      <th>pred1_is_dog</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>475</th>\n",
       "      <td>[819015337530290176, 819004803107983360]</td>\n",
       "      <td>1.400000</td>\n",
       "      <td>Standard Poodle</td>\n",
       "      <td>[True, True]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>476</th>\n",
       "      <td>[680494726643068929]</td>\n",
       "      <td>2.600000</td>\n",
       "      <td>Kuvasz</td>\n",
       "      <td>[True]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>477</th>\n",
       "      <td>[778027034220126208]</td>\n",
       "      <td>2.700000</td>\n",
       "      <td>Clumber</td>\n",
       "      <td>[True]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>478</th>\n",
       "      <td>[810984652412424192]</td>\n",
       "      <td>3.428571</td>\n",
       "      <td>Golden Retriever</td>\n",
       "      <td>[True]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>479</th>\n",
       "      <td>[786709082849828864]</td>\n",
       "      <td>7.500000</td>\n",
       "      <td>Pomeranian</td>\n",
       "      <td>[True]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     tweet_id  rating_ratio      prediction_1  \\\n",
       "475  [819015337530290176, 819004803107983360]      1.400000   Standard Poodle   \n",
       "476                      [680494726643068929]      2.600000            Kuvasz   \n",
       "477                      [778027034220126208]      2.700000           Clumber   \n",
       "478                      [810984652412424192]      3.428571  Golden Retriever   \n",
       "479                      [786709082849828864]      7.500000        Pomeranian   \n",
       "\n",
       "     pred1_is_dog  \n",
       "475  [True, True]  \n",
       "476        [True]  \n",
       "477        [True]  \n",
       "478        [True]  \n",
       "479        [True]  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Get the data we need into a single dataframe called ratings\n",
    "df_tweet = dfa[['tweet_id','rating_ratio']]\n",
    "df_dog = dfi[['tweet_id','prediction_1','pred1_is_dog']]\n",
    "df_dog_rating_ratio = pd.merge(df_tweet, df_dog, left_index=True, on=['tweet_id'])\n",
    "df_dog_rating_ratio = df_dog_rating_ratio[df_dog_rating_ratio['pred1_is_dog'] == True]\n",
    "\n",
    "ratings = df_dog_rating_ratio.groupby(['rating_ratio','prediction_1'],as_index=False).agg(list).reindex(columns=df_dog_rating_ratio.columns)\n",
    "ratings.tail(5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 480 entries, 0 to 479\n",
      "Data columns (total 4 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   tweet_id      480 non-null    object \n",
      " 1   rating_ratio  480 non-null    float64\n",
      " 2   prediction_1  480 non-null    object \n",
      " 3   pred1_is_dog  480 non-null    object \n",
      "dtypes: float64(1), object(3)\n",
      "memory usage: 15.1+ KB\n"
     ]
    }
   ],
   "source": [
    "ratings.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 506,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#We see that the pomeranian had the highest rating ratio followed by the golden retriever.\n",
    "import seaborn as sns\n",
    "fig, ax1 = plt.subplots(figsize=(25, 10))\n",
    "ax1 = sns.barplot(x=\"prediction_1\", y=\"rating_ratio\", data=ratings.tail(15),ax=ax1)\n",
    "sns.set(style=\"whitegrid\")\n",
    "ax1.set_xlabel('Dog Prediction',fontsize=15, color=\"blue\")\n",
    "ax1.set_ylabel('Rating Ratio(Numerator to Denominator)',fontsize=15, color=\"blue\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='insight2'></a>\n",
    "### Insight 2:  Used extracted Year category from datetime to find an upward trend over time of favorite and retrweet counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 508,
   "metadata": {
    "code_folding": []
   },
   "outputs": [],
   "source": [
    "#Reconvert year to string for plotting as datatype was not conserved when converting to csv\n",
    "dfa.year = dfa.year.astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 509,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "year\n",
       "2015     2326.207547\n",
       "2016     6544.889362\n",
       "2017    17673.659529\n",
       "Name: favorite_count, dtype: float64"
      ]
     },
     "execution_count": 509,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Group retweet & favorite counts by year\n",
    "df_yr = dfa[['year','retweet_count','favorite_count']]\n",
    "df_yr_mean = df_yr.groupby('year')['retweet_count'].mean()\n",
    "df_yr2_mean = df_yr.groupby('year')['favorite_count'].mean()\n",
    "df_yr2_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 510,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 510,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Overall favorite & retweet counts trend upwards 2015-107. Favorite counts, especially after 2016\n",
    "plt.figure(figsize=(25,5))\n",
    "ax = sns.lineplot(data=df_yr_mean,color=\"coral\", label=\"Retweet Count\", sort=False, lw=3)\n",
    "ax1 = sns.lineplot(data=df_yr2_mean,color=\"blue\", label=\"Favorite Count\", sort=False, lw=3)\n",
    "\n",
    "ax.set_xlabel(\" Year\", fontsize=15, color=\"blue\")\n",
    "ax.set_ylabel(\"Counts\", fontsize=15, color=\"blue\")\n",
    "\n",
    "plt.xticks(\n",
    "    rotation=45, \n",
    "    horizontalalignment='right',\n",
    "    fontweight='light',\n",
    "    fontsize='x-large'  \n",
    ")\n",
    "plt.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='insight3'></a>\n",
    "### Insight 3: By changing dog categories to 0 / 1 values I can sum up and see which ones are most popular."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 511,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dfa[['doggo','pupper','puppo','floofer']].sum().plot();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "English       2313\n",
       "None             7\n",
       "Indonesian       3\n",
       "Dutch            3\n",
       "Tagalog          1\n",
       "Spanish          1\n",
       "Romanian         1\n",
       "Basque           1\n",
       "Estonian         1\n",
       "Name: language, dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#English is the most popular language.\n",
    "dfa.language.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='insight4'></a>\n",
    "### Insight 4: After cleaning the the names by removing words like 'a, the, etc' and also capitalizing them, I'm able to see which names are the most popular. I'm also able to do this for the dog breeds."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 513,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure();\n",
    "top_20_names = dfa['name'].value_counts(dropna=True)[:20]\n",
    "top_20_names.plot.bar(title=\"Names\", grid=True);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 514,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure();\n",
    "top_20_breeds = dfi[dfi['pred1_is_dog'] == True].prediction_1.value_counts(dropna=True)[:20]\n",
    "top_20_breeds.plot.bar(title=\"Names\", grid=True);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='insight5'></a>\n",
    "### Insight 5: Discovered that the dog images correctly identified as dogs were not always correct much of the time. For example, a German Shepherd was identified as a corgi (aka Carigan) . I used the image_munge() script to find and glue all of these images together so I could see what was going on clearly. Farther down, we also look at what the top incorrectly identified images pulled up."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we find all thumbnails labeled as Cardigan, and glue them together in a single image. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 515,
   "metadata": {
    "code_folding": [
     0
    ]
   },
   "outputs": [],
   "source": [
    "#Dogs identified as Cardigans\n",
    "df_cardigan = dfi[dfi['prediction_1'] == 'Cardigan']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 516,
   "metadata": {
    "code_folding": [
     0
    ]
   },
   "outputs": [],
   "source": [
    "#Extract filenames from df_cardigan.jpg_url\n",
    "import sys\n",
    "import glob\n",
    "from PIL import Image\n",
    "#Extract filenames from jpg_url\n",
    "cardigan_urls = df_cardigan.jpg_url.str.rsplit(\"/\", n=1, expand=True)[1]\n",
    "cardigan_urls = 'Thumbs/' + cardigan_urls #Point to directory where thumbs are stored."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 517,
   "metadata": {},
   "outputs": [],
   "source": [
    "cardigan_urls = cardigan_urls.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 518,
   "metadata": {
    "code_folding": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Verify that these images are on disk. Some are not.\n",
    "import os\n",
    "cardigan_url_pruned = []\n",
    "for url in cardigan_urls:\n",
    "    if os.path.exists(url):\n",
    "        #print('true')\n",
    "        cardigan_url_pruned.append(url)\n",
    "    else:\n",
    "        print('')\n",
    "        #print('false', url)\n",
    "        \n",
    "cardigan_url_pruned"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 342,
   "metadata": {
    "code_folding": [
     0
    ]
   },
   "outputs": [],
   "source": [
    "#Glue the thumbnails together into one image with thumb_munge function.\n",
    "def thumb_munge(img_list, filename):\n",
    "    import math\n",
    "    #get image dimensions\n",
    "    rows = int(math.sqrt(len(img_list)))\n",
    "    if len(img_list) - rows**2 > rows:\n",
    "        cols = rows + 2\n",
    "    elif math.sqrt(len(img_list)) - math.floor(math.sqrt(len(img_list))) == 0:\n",
    "        cols = rows\n",
    "    else:\n",
    "        cols = rows + 1\n",
    "    cols = int(math.sqrt(len(img_list)))+1\n",
    "    images = [Image.open(name).resize((100, 100)) for name in img_list]\n",
    "    blue_square = Image.open('blue_square.jpg').resize((100, 100))\n",
    "    #print(len(images))\n",
    "    # create empty canvas for thumbnails\n",
    "    new_image = Image.new('RGB', (cols*100, rows*100))\n",
    "    new_image.save('empty.jpg')\n",
    "    # place thumbnails\n",
    "    i = 0\n",
    "    for y in range(rows):\n",
    "        if i >= len(images):\n",
    "            break\n",
    "        y *= 100\n",
    "        for x in range(cols):\n",
    "            x *= 100\n",
    "            if i < len(images):\n",
    "                img = images[i]\n",
    "                new_image.paste(img, (x, y, x+100, y+100))\n",
    "                i += 1\n",
    "            else:\n",
    "                new_image.paste(blue_square, (x, y, x+100, y+100))\n",
    "    # save file\n",
    "    new_image.save(filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 519,
   "metadata": {},
   "outputs": [],
   "source": [
    "thumb_munge(cardigan_url_pruned, \"cardigan_output2.jpg\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"text-align: center;\">These are mostly corgis but certainly not all!</p>\n",
    "<img src=\"cardigan_output2.jpg\">\n",
    "\n",
    "<div style=\"display: flex; flex-flow: row wrap; text-align: center;\">\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "metadata": {
    "code_folding": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Seat Belt      22\n",
       "Web Site       19\n",
       "Teddy          18\n",
       "Tennis Ball     9\n",
       "Dingo           9\n",
       "Name: prediction_1, dtype: int64"
      ]
     },
     "execution_count": 251,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Although incorrect, Seat Belt *would* make an interesting dog name.\n",
    "incorrect_breeds = dfi[dfi['pred1_is_dog'] == False]\n",
    "incorrect_breeds.prediction_1.value_counts(dropna=True)[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_seat_belt = dfi[dfi['prediction_1'] == 'Seat Belt'];"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "metadata": {
    "code_folding": [
     0
    ]
   },
   "outputs": [],
   "source": [
    "#Extract filenames from jpg_url\n",
    "seat_belt_urls = df_seat_belt.jpg_url.str.rsplit(\"/\", n=1, expand=True)[1]\n",
    "seat_belt_urls = 'Thumbs/' + seat_belt_urls #Point to directory where thumbs are stored."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "metadata": {
    "code_folding": [
     0
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Verify that these images are on disk. Some are not.\n",
    "import os\n",
    "seatbelt_url_pruned = []\n",
    "for url in seat_belt_urls:\n",
    "    if os.path.exists(url):\n",
    "        #print('true')\n",
    "        seatbelt_url_pruned.append(url)\n",
    "    else:\n",
    "        print('')\n",
    "        #print('false', url)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "19"
      ]
     },
     "execution_count": 325,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(seatbelt_url_pruned)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 343,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Glue thumbnails together with thumb_munge function \n",
    "thumb_munge(seatbelt_url_pruned, \"seat_belt_dogs.jpg\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<p style=\"text-align: center;\">We can see how some of these dogs in cars can be identified as seat belt, however, not all reflect the car correlation.</p>\n",
    "<img src=\"seat_belt_dogs.jpg\">\n",
    "\n",
    "<div style=\"display: flex; flex-flow: row wrap; text-align: center;\">\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Thank you for reading!"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:data_process] *",
   "language": "python",
   "name": "conda-env-data_process-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
